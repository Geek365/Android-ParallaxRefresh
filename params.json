{"name":"Android-parallaxrefresh","tagline":"This is a drop-down head View supports parallax effect, support refresh libraries！","body":"# Android-ParallaxRefresh\r\nThis is a drop-down head View supports parallax effect, support refresh libraries！ If you have any questions in the course or suggestions, please send an e-mail to the following e-mail, thank you!\r\n\r\nFor more information please see <a href='http://devsoulwolf.github.io/Android-ParallaxRefresh'>the website</a>\r\n\r\n## Screenshots\r\n\r\n![Sample](https://img.alicdn.com/imgextra/i3/1025192026/TB2pBIHeVXXXXb3XXXXXXXXXXXX_!!1025192026.gif)\r\n![Sample](https://img.alicdn.com/imgextra/i4/1025192026/TB2yYAweVXXXXaIXpXXXXXXXXXX_!!1025192026.gif)\r\n\r\n\r\n## Android-ParallaxRefresh with xml code\r\n```xml\r\n\t// ListView\r\n\t<net.soulwolf.widget.parallaxrefresh.ParallaxScrollLayout\r\n        android:id=\"@+id/parallax\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\">\r\n\r\n        <net.soulwolf.widget.parallaxrefresh.widget.ParallaxListView\r\n            android:id=\"@+id/list\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"/>\r\n\r\n    </net.soulwolf.widget.parallaxrefresh.ParallaxScrollLayout>\r\n\t\r\n\t// ScrollView\r\n\t<net.soulwolf.widget.parallaxrefresh.ParallaxScrollLayout\r\n        android:id=\"@+id/parallax\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\">\r\n\r\n        <net.soulwolf.widget.parallaxrefresh.widget.ParallaxScrollView\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\">\r\n\r\n            <FrameLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"match_parent\"\r\n                android:background=\"@android:color/white\">\r\n\r\n                <android.support.v7.widget.CardView xmlns:card_view=\"http://schemas.android.com/apk/res-auto\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_margin=\"5dp\"\r\n                    card_view:cardBackgroundColor=\"@color/sample_primary\"\r\n                    card_view:cardCornerRadius=\"10dp\">\r\n\r\n                    <TextView\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:padding=\"@dimen/activity_horizontal_margin\"\r\n                        android:text=\"@string/card_text\"\r\n                        android:textColor=\"@android:color/white\"\r\n                        android:textSize=\"16sp\" />\r\n\r\n                </android.support.v7.widget.CardView>\r\n            </FrameLayout>\r\n        </net.soulwolf.widget.parallaxrefresh.widget.ParallaxScrollView>\r\n\r\n    </net.soulwolf.widget.parallaxrefresh.ParallaxScrollLayout>\t\r\n```\r\n## Android-ParallaxRefresh with java code\r\n```java\r\n\t// ParallaxHolder\r\n\tpublic class SimpleParallaxHolder extends BaseParallaxHolder {\r\n\t\r\n\t    @Override\r\n\t    public int getParallaxTop() {\r\n\t        return (int) (getRealHeight() * .1f);\r\n\t    }\r\n\t\r\n\t\r\n\t    @Override\r\n\t    public int getParallaxBottom() {\r\n\t        return (int) (getRealHeight() * .4f);\r\n\t    }\r\n\t\r\n\t    @Override\r\n\t    protected View onCreateView(LayoutInflater inflater, ViewGroup container, boolean attachRoot) {\r\n\t        return inflater.inflate(R.layout.simple_parallax_holder,container,attachRoot);\r\n\t    }\r\n\t\r\n\t    @Override\r\n\t    public void onCreate(Context context) {\r\n\t        super.onCreate(context);\r\n\t    }\r\n\t\r\n\t    @Override\r\n\t    public void onMeasured(int width, int height) {\r\n\t        super.onMeasured(width, height);\r\n\t    }\r\n\t\r\n\t    @Override\r\n\t    public int getRealWidth() {\r\n\t        return super.getRealWidth();\r\n\t    }\r\n\t\r\n\t    @Override\r\n\t    public int getRealHeight() {\r\n\t        return super.getRealHeight();\r\n\t    }\r\n\t\r\n\t    @Override\r\n\t    public void onScrollChanged(int scrollX, int scrollY, boolean isTouchEvent) {\r\n\t        super.onScrollChanged(scrollX, scrollY, isTouchEvent);\r\n\t    }\r\n\t\r\n\t    @Override\r\n\t    public void onRollback() {\r\n\t        super.onRollback();\r\n\t    }\r\n\t\r\n\t    @Override\r\n\t    public void onDestroy() {\r\n\t        super.onDestroy();\r\n\t    }\r\n\t\r\n\t    @Override\r\n\t    public View getContentView() {\r\n\t        return super.getContentView();\r\n\t    }\r\n\t}\r\n\r\n\t// ListView And ScrollView\r\n\tParallaxScrollLayout mParallaxScrollLayout = (ParallaxScrollLayout) findViewById(R.id.parallax);\r\n        mListView = (ListView) findViewById(R.id.list);\r\n        mParallaxScrollLayout.setParallaxHolder(new SimpleParallaxHolder());\r\n        mParallaxScrollLayout.setRefreshRatio(.8f);\r\n        mParallaxScrollLayout.setOnRefreshListener(this);\r\n\r\n\t// OnRefreshListener\r\n\tOnRefreshListener listener = new OnRefreshListener(){\r\n\r\n\t\tpublic void onRefresh(){\r\n\t\t\t// refresh\r\n\t\t}\r\n\r\n\t};\r\n```\r\n\r\n## Attr params  info\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td><em>attrName</em></td>\r\n\t\t\t<td><em>Explanation</em></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>psvParallaxMode</td>\r\n\t\t\t<td>This parameter indicates whether or not to follow the head View scroll through the list, the default scroll (scroll)</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n## Implementing View!\r\n\r\n <ul>\r\n   \t<li><a href='javascript:'>ParallaxScrollView</a></li>\r\n\t<li><a href='javascript:'>ParallaxListView</a></li>\r\n </ul>\r\n\r\n## Custom\r\n```java\r\n\tpublic class ParallaxListView extends ListView implements ParallaxScrollObserver, AbsListView.OnScrollListener {\r\n\t\r\n\t    private ParallaxScrollCallback mParallaxScrollCallback;\r\n\t    private int mScrollY;\r\n\t    private OnScrollListener mDelegateOnScrollListener;\r\n\t\r\n\t    public ParallaxListView(Context context) {\r\n\t        super(context);\r\n\t        initialize();\r\n\t    }\r\n\t\r\n\t    public ParallaxListView(Context context, AttributeSet attrs) {\r\n\t        super(context, attrs);\r\n\t        initialize();\r\n\t    }\r\n\t\r\n\t    public ParallaxListView(Context context, AttributeSet attrs, int defStyleAttr) {\r\n\t        super(context, attrs, defStyleAttr);\r\n\t        initialize();\r\n\t    }\r\n\t\r\n\t    @TargetApi(Build.VERSION_CODES.LOLLIPOP)\r\n\t    public ParallaxListView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {\r\n\t        super(context, attrs, defStyleAttr, defStyleRes);\r\n\t        initialize();\r\n\t    }\r\n\t\r\n\t    private void initialize() {\r\n\t        super.setOnScrollListener(this);\r\n\t    }\r\n\t\r\n\t    @Override\r\n\t    public void setScrollCallback(@NonNull ParallaxScrollCallback callback) {\r\n\t        this.mParallaxScrollCallback = callback;\r\n\t    }\r\n\t\r\n\t    @Override\r\n\t    public void setPlaceholder(@NonNull View view) {\r\n\t        removeHeaderView(view);\r\n\t        addHeaderView(view);\r\n\t    }\r\n\t\r\n\t    @Override\r\n\t    public void setOnScrollListener(OnScrollListener l) {\r\n\t        this.mDelegateOnScrollListener = l;\r\n\t    }\r\n\t\r\n\t    private int getRealScrollY() {\r\n\t        View c = getChildCount() > 0 ? getChildAt(0) : null;\r\n\t        if (c == null) {\r\n\t            return 0;\r\n\t        }\r\n\t        int firstVisiblePosition = getFirstVisiblePosition();\r\n\t        int top = c.getTop();\r\n\t        return -top + firstVisiblePosition * c.getHeight() ;\r\n\t    }\r\n\t\r\n\t    @Override\r\n\t    public void onScrollStateChanged(AbsListView view, int scrollState) {\r\n\t        if(mDelegateOnScrollListener != null){\r\n\t            mDelegateOnScrollListener.onScrollStateChanged(view,scrollState);\r\n\t        }\r\n\t    }\r\n\t\r\n\t    @Override\r\n\t    public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {\r\n\t        int realScrollY = getRealScrollY();\r\n\t        if(mParallaxScrollCallback != null && realScrollY != mScrollY){\r\n\t            mParallaxScrollCallback.onParallaxScrollChanged(0,realScrollY,true);\r\n\t            mScrollY = realScrollY;\r\n\t        }\r\n\t        if(mDelegateOnScrollListener != null){\r\n\t            mDelegateOnScrollListener.onScroll(view,firstVisibleItem,visibleItemCount,totalItemCount);\r\n\t        }\r\n\t    }\r\n\t}\r\n```\r\n\r\n## Maven\r\n\t<dependency>\r\n  \t    <groupId>net.soulwolf.widget</groupId>\r\n\t\t<url>https://dl.bintray.com/soulwolf/maven</url>\r\n  \t    <artifactId>parallaxRefresh</artifactId>\r\n  \t    <version>1.0.0</version>\r\n\t</dependency>\r\n## Gradle\r\n\tallprojects {\r\n       repositories {\r\n          jcenter()\r\n       }\r\n\t}\r\n\t\r\n\tcompile 'net.soulwolf.widget:parallaxRefresh:1.0.0'\r\n\r\n## Developed by\r\n Ching Soulwolf - <a href='javascript:'>Ching.Soulwolf@gmail.com</a>\r\n\r\n\r\n## License\r\n\tCopyright 2015 Soulwolf Ching\r\n\tCopyright 2015 The Android Open Source Project for Android-ParallaxRefresh\r\n\t\r\n\tLicensed under the Apache License, Version 2.0 (the \"License\");\r\n\tyou may not use this file except in compliance with the License.\r\n\tYou may obtain a copy of the License at\r\n\r\n\t    http://www.apache.org/licenses/LICENSE-2.0\r\n\t\r\n\tUnless required by applicable law or agreed to in writing, software\r\n\tdistributed under the License is distributed on an \"AS IS\" BASIS,\r\n\tWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\tSee the License for the specific language governing permissions and\r\n\tlimitations under the License.\r\n\t\r\n\r\n","google":"parallaxrefresh","note":"Don't delete this file! It's used internally to help with page regeneration."}